const scripts = {
    CLICK_THROUGH:`function script($windowTitle,$enabled) {try {Add-Type -TypeDefinition 'using System;using System.Text;using System.Runtime.InteropServices;public class User32 {[DllImport("user32.dll", SetLastError = true)] public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);[DllImport("user32.dll", SetLastError = true)] public static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount); [DllImport("user32.dll", SetLastError = true)] public static extern int GetWindowLong(IntPtr hWnd, int nIndex); [DllImport("user32.dll", SetLastError = true)] public static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong); public const int GWL_EXSTYLE = -20; public const int WS_EX_LAYERED = 0x80000; public const int WS_EX_TRANSPARENT = 0x20; public static string GetWindowTitle(IntPtr hWnd) { StringBuilder sb = new StringBuilder(256); GetWindowText(hWnd, sb, sb.Capacity); return sb.ToString(); }}'} catch {}$windowId=[User32]::FindWindow([NullString]::Value, $windowTitle);if ($windowId -ne [IntPtr]::Zero) {if ($enabled -eq "true") {[User32]::SetWindowLong($windowId, [User32]::GWL_EXSTYLE, [User32]::GetWindowLong($windowId, [User32]::GWL_EXSTYLE) -bor [User32]::WS_EX_LAYERED -bor [User32]::WS_EX_TRANSPARENT) | Out-Null}else {[User32]::SetWindowLong($windowId, [User32]::GWL_EXSTYLE, [User32]::GetWindowLong($windowId, [User32]::GWL_EXSTYLE) -band -bnot ([User32]::WS_EX_LAYERED -bor [User32]::WS_EX_TRANSPARENT)) | Out-Null}} else {Write-Host "NO WINDOW FOUND, $windowTitle, $enabled"}}`,
    
    MOVE_WINDOW:`function script($windowTitle, $finalX, $finalY, $speed, $startX, $startY){try {Add-Type -TypeDefinition 'using System;using System.Runtime.InteropServices;public class User32{[DllImport("user32.dll", SetLastError = true)]public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);[DllImport("user32.dll", SetLastError = true)][return: MarshalAs(UnmanagedType.Bool)]public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);[StructLayout(LayoutKind.Sequential)]public struct POS {public int x;public int y;public int nx;public int ny;};[DllImport("user32.dll")]public static extern int GetWindowRect(IntPtr hWnd, ref POS pos);}'}catch {}$windowId=[User32]::FindWindow([NullString]::Value,$windowTitle);if($windowId -ne [IntPtr]::Zero){$pos=New-Object User32+POS;[User32]::GetWindowRect($windowId, [ref]$pos)|Out-Null;$initX=$pos.x;$initY=$pos.y;if($startX -ne ""){$initX=[int]$startX}if($startY -ne ""){$initY=[int]$startY}if($speed -ne ""){$speed=[double]$speed}else{$speed=8}$dx=[int]$finalX-$initX;$dy=[int]$finalY-$initY;$steps=[math]::Ceiling(([math]::Sqrt($dx*$dx+$dy*$dy))/$speed);$delay=$speed/$steps;$stepX=$dx/$steps;$stepY=$dy/$steps;for($i=0;$i -lt $steps;$i++){[User32]::SetWindowPos($windowId, [IntPtr]::Zero, [int]($initX+$stepX*$i), [int]($initY+$stepY*$i), 0, 0, 0) | Out-Null;Start-Sleep -Seconds $delay;}}else{Write-Host "NO WINDOW FOUND, $windowTitle, $finalX, $finalY, $speed, $startX, $startY"}}`,

    TEST:`function script($param) {write-host "running test function lol idk";write-host $param;& calc.exe}`,

    WINDOW_DISPLAY:`function script($windowTitle, $flag) {try{Add-Type -TypeDefinition 'using System;using System.Runtime.InteropServices;public class WindowManagement{[DllImport("user32.dll",CharSet=CharSet.Auto)]public static extern IntPtr FindWindow(string lpClassName,string lpWindowName);[DllImport("user32.dll")]public static extern bool ShowWindow(IntPtr hWnd,int nCmdShow);}'}catch{}$windowId = [WindowManagement]::FindWindow([NullString]::Value, $windowTitle);if($windowId -ne [IntPtr]::Zero){[WindowManagement]::ShowWindow($windowId,[int]$flag);}{else Write-Host "NO WINDOW FOUND, $windowTitle,$flag";}}`,
}

module.exports = scripts